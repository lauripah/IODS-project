1+1
1+1
}
1+1
1+1
barplot(tulos)
tulos<-table(random_integers(10000,0,5))
barplot(tulos)
tulos2<-table(random_integers2(10000,0,5))
barplot(tulos2)
random_integers2 <- function(N = n, a = 0, b = 1) {
values <- runif(n = N, min = a, max = b)
int_values <- round(values)
return(int_values)
}
tulos2<-table(random_integers2(10000,0,5))
barplot(tulos2)
return(int_values)
random_integers2 <- function(N = 1, a = 0, b = 1) {
values <- runif(n = N, min = a, max = b)
int_values <- values
return(int_values)
}
tulos2<-table(random_integers2(10000,0,5))
barplot(tulos2)
random_integers2 <- function(N = 1, a = -0.5, b = 1.5) {
values <- runif(n = N, min = a, max = b)
int_values <- round(values)
return(int_values)
}
barplot(tulos2)
tulos2<-table(random_integers2(10000,0,5))
barplot(tulos2)
tulos2<-table(random_integers2(10000,-0.5,5.5))
barplot(tulos2)
random_integers2 <- function(N = 1, a = 0, b = 1) {
values <- runif(n = N, min = a, max = b)
int_values <- round(values)
return(int_values)
}
tulos2<-table(random_integers2(10000,-0.5,5.5))
barplot(tulos2)
tulos2<-table(random_integers2(10000,0,5))
barplot(tulos2)
tulos2<-table(random_integers2(10000,-0.5,5.5))
barplot(tulos2)
A<-matrix(1:50, nrow=5)
A
varianssi<-function(n){(1/(length(n)-1))*(sum(n)-keskiarvo(n))^2}
varianssi<-function(n){(1/(length(n)-1))*(sum((n-keskiarvo(n))^2)}
varianssi<-function(n){(1/(length(n)-1))*((sum((n-keskiarvo(n))^2)}
tulo<-function(n){{for(i in 1:length(n)){a<-a*n[i]}+return(a)}}
tulo(values)
prod(values)
tulo<-function(n){{for(i in 1:length(n)){a<-a*n[i]}+print(a)}}
tulo(values)
varianssi<-function(n)(1/(length(n)-1))*((sum((n-keskiarvo(n))^2)
varianssi(values)
varianssi(values)
var(values)
varianssi<-function(n)(1/(length(n)-1))*sum((n-keskiarvo(n))^2)
#b)
varianssi(values)
var(values)
tulo<-function(n){{for(i in 1:length(n)){a<-a*n[i]}}+return(a)
tulo(values)
tulo(values)
tulo<-function(n){{for(i in 1:length(n)){a<-a*n[i]}}+return(a)
tulo(values)
tulo(values)
a <-1
tulo<-function(n){{for(i in 1:length(n)){a<-a*n[i]}}+return(a)
tulo(values)
prod(values)
tulo<-function(n){for(i in 1:length(n)){a<-a*n[i]}+return(a)
a <-1
tulo<-function(n){for(i in 1:length(n)){a<-a*n[i]}+return(a)
tulo(values)
prod(values)
a <-1
tulo<-function(n){
a <- 1
for(i in 1:length(n))
{a<-a*n[i]}
return(a)
}
tulo(values)
prod(values)
values
prod(values)
tulos(valuse)
tulo(values)
tulo(values)
tulo(values)
tulo<-function(n){
a <- 1
for(i in 1:length(n))
{a = a*n[i]}
}
tulo(values)
tulo(values)
a = 1
tulo<-function(n){
a = 1
for(i in 1:length(n))
{a = a*n[i]}
}
tulo(values)
tulo(values)
a = 1
tulo<-function(n){
for(i in 1:length(n))
{a = a*n[i]}
}
tulo(values)
a = 1
tulo<-function(n){
for(i in n)
{a = a*n[i]}
}
tulo(values)
a = 1
tulo<-function(n){
for(i in n)
{a = a*n[i]}
return(a)
}
tulo(values)
a = 1
tulo<-function(n){
for(i in n)
{a = a*i}
return(a)
}
tulo(values)
kertoma<-function(n){{for(i in 1:n){a<-a*i}}+return(a)}
kertoma(10)
factorial(10)
rm(globalVariables())
rm(globalenvironment)
rm(all)
?rm
rm(envir)
tulokset<-c(9730, 8240, 8060, 9100, 8880, 10070, 9810)
mean(tulokset)
sd(tulokset)
tulokset<-c(9730, 8240, 8060, 9100, 8880, 10070, 9810)
keskiarvo<-mean(tulokset)
keskihajonta<-sd(tulokset)
otoskoko<-lenght(tulokset)
vapausaste<-qt(0.975, df=otoskoko-1)
tulokset<-c(9730, 8240, 8060, 9100, 8880, 10070, 9810)
keskiarvo<-mean(tulokset)
keskihajonta<-sd(tulokset)
otoskoko<-length(tulokset)
vapausaste<-qt(0.975, df=otoskoko-1)
keskiarvo-vapausaste*keskihajonta/sqrt(otoskoko)
keskiarvo+vapausaste*keskihajonta/sqrt(otoskoko)
dnorm(n=10, mean=3.952, sd=sqrt(1.981))
rnorm(n=10, mean=3.952, sd=sqrt(1.981))
A<-rnorm(n=10, mean=3.952, sd=sqrt(1.981))
B<-rnorm(n=15, mean=3.411, sd=sqrt(1.321))
?rbind()
rbind(B, A)
A+B
mean(A+B)
combine(A,B)
merge(A,B)
?merge
yhdiste<-merge(A,B)
mean(yhdiste)
mean((as.numeric(yhdiste))
mean(as.numeric(yhdiste))
?match
mean(A %in% B)
yhdiste<-rbind(A,B)
yhdiste<-rbind(A,B)
yhdiste<-rbind(A,B)
yhdiste<-append(A,B)
yhdiste
mean(yhdiste)
sd(yhdiste)
rnorm(10000, sd=sd(yhdiste), mean=mean(yhdiste))
testi<-rnorm(10000, sd=sd(yhdiste), mean=mean(yhdiste))
mean(testi)
sd(yhdiste)
mean(yhdiste)
(1/sqrt(10))*sqrt(1.981)
lotto<-seq(1:40)
combn(lotto, 7, FUN = NULL, simplify = TRUE)
combn(lotto, 7)
comb = function(n, x) {
return(factorial(n) / (factorial(x) * factorial(n-x)))
}
comb(40,7)
?factorial
comb(40,3)
comb(40,3)/comb(40,7)
comb = function(n, x) {
(factorial(n) / (factorial(x) * factorial(n-x)))
}
comb(40,3)
100/comb(40,7)
vektori <- c(1:29)
sample(vektori,10)
noppa1=c(1/10, 1/10, 1/10, 1/10, 1/10, 1/2)
noppa2=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
sample(noppa1, 100)
tod1=c(1/10, 1/10, 1/10, 1/10, 1/10, 1/2)
tod2=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
sample(seq(1:6), 100,prob=tod1)
sample(seq(1:6), 100,prob=tod1,replace=TRUE)
plot(sample(seq(1:6), 100,prob=tod1,replace=TRUE))
boxplot(sample(seq(1:6), 100,prob=tod1,replace=TRUE))
?plot
plot(x=sample(seq(1:6), 100,prob=tod1,replace=TRUE), y=sample(seq(1:6), 100,prob=tod2,replace=TRUE)
table(sample(seq(1:6), 100,prob=tod1,replace=TRUE))
table(sample(seq(1:6), 100,prob=tod1,replace=TRUE)))
table(sample(seq(1:6), 100,prob=tod1,replace=TRUE))
table(sample(seq(1:6), 100,prob=tod2,replace=TRUE))
reilu_noppa <- function(){
dice <- sample(1:6, size = 1, replace = TRUE)
return(dice))
}
reilu_noppa <- function(){
dice <- sample(1:6, size = 1, replace = TRUE)
return(dice)
}
reilu_noppa
reilu_noppa
reilu_noppa()
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 100,prob=tod1,replace=TRUE))
return(dice)
}
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 100,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa()
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 1,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa()
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 1,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa()
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 1,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa()
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 1,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa()
epareilu_noppa <- function(){
dice <- sample(seq(1:6), 1,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa()
reilu_noppa <- function(n){
dice <- sample(1:6, size = n, replace = TRUE)
return(dice)
}
reilu_noppa(3)
epareilu_noppa <- function(n){
dice <- sample(seq(1:6), n,prob=tod1,replace=TRUE)
return(dice)
}
epareilu_noppa(3)
epareilu_noppa(3)
epareilu_noppa(3)
plot(epareilu_noppa(100), reilu_noppa(100))
table(epareilu_noppa(100), reilu_noppa(100))
str(epareilu_noppa(100))
replicate(300, epareilu_noppa())
replicate(20, epareilu_noppa())
reilu_noppa <- function(n){
dice <- sample(1:6, size = n = 1, replace = TRUE)
return(dice)
}
epareilu_noppa <- function(n){
dice <- sample(seq(1:6), n=1,prob=tod1,replace=TRUE)
return(dice)
}
reilu_noppa <- function(n=1){
dice <- sample(1:6, size = n, replace = TRUE)
return(dice)
}
epareilu_noppa <- function(n=1){
dice <- sample(seq(1:6), n,prob=tod1,replace=TRUE)
return(dice)
}
replicate(20, epareilu_noppa())
replicate(20, epareilu_noppa(5))
z<-c(6,6,6,6,6)
replicate(20, epareilu_noppa(5))==z
replicate(20, epareilu_noppa(5))==6
replicate(20, epareilu_noppa(5))==z
sum(replicate(20, epareilu_noppa(5))==z)
replicate(20, epareilu_noppa(5))
replicate(1000, epareilu_noppa(5))
z<-c(6,6,6,6,6)
z<-c[6,6,6,6,6]
z<-c[,6,6,6,6,6]
[,6,6,6,6,6]
z<-[6,6,6,6,6]
z<-c[6,6,6,6,6]
z<-,[6,6,6,6,6]
replicate(20, epareilu_noppa(5))
nopat<-c(reilu_noppa,epareilu_noppa)
nopat<-c(reilu_noppa(),epareilu_noppa())
?rnorm()
max(rnorm(3000,mean=170,sd=30))
sd(rnorm(3000,mean=170,sd=30))
min(rnorm(3000,mean=170,sd=30))
nopat<-c(reilu_noppa(),epareilu_noppa())
sample(nopat,size=20)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
nopat<-c(reilu_noppa(2),epareilu_noppa(2))
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
sample(nopat,size=20,replace=TRUE)
nopat<-c("reilu_noppa()","epareilu_noppa()")
sample(nopat,size=20,replace=TRUE)
for (i in 1:100) {
epareilu_noppa(i)
}
for (i in 1:10) {
epareilu_noppa(i)
}
for (i in 1:10) {
print(epareilu_noppa(i))
}
kymmenennoppaa <- for (i in 1:10) {
print(epareilu_noppa(i))
}
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
kymmenennoppaa
load("~/IODS/IODS-project/data/create_alc.R")
setwd("~/IODS/IODS-project/data")
data <- read.csv("student-mat.csv")
data_m <- read.csv("student-mat.csv")
data_m <- read.csv("student-mat.csv")
math <- read.table(data_m, sep = ";" , header=TRUE)
View(data)
data_m <- read.csv("student-mat.csv", sep = ";")
math <- read.csv("student-mat.csv", sep = ";")
head(math)
str(math)
por <- read.csv("student-por.csv", sep = ";")
str(por)
dim(math)
dim(por)
install.packages("dplyr")
library(dplyr)
math_por <- inner_join(math, por, by = join_by, suffix=c(".math", ".por"))
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix=c(".math", ".por"))
str(math_por)
dim(math_por)
#Lauri-Pekka Aho
#10.2.2017
#Data wrangling of UCI Machine Learning Repository, Student Alcohol consumption data
setwd("~/IODS/IODS-project/data")
math <- read.csv("student-mat.csv", sep = ";")
str(math)
dim(math)
por <- read.csv("student-por.csv", sep = ";")
str(por)
dim(por)
install.packages("dplyr")
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix=c(".math", ".por"))
str(math_por)
dim(math_por)
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
two_columns <- select(math_por, starts_with(column_name))
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
alc[column_name] <- round(rowMeans(two_columns))
} else {
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
math <- read.csv("student-mat.csv", sep = ";")
str(math)
dim(math)
por <- read.csv("student-por.csv", sep = ";")
str(por)
dim(por)
install.packages("dplyr")
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix=c(".math", ".por"))
str(math_por)
dim(math_por)
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
two_columns <- select(math_por, starts_with(column_name))
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
alc[column_name] <- round(rowMeans(two_columns))
} else {
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = (alc_use > 2))
install.packages("dplyr")
glimpse(alc)
write.csv(alc, "alc.csv")
write.csv(alc, "alc.csv", sep=",")
write.csv(alc, "alc.csv", sep=",")
View(alc)
write.csv(alc, "alc.csv", sep=";")
write.csv(alc, "alc.csv", sep=",")
write.table(alc, "alc.csv", sep=",")
#Lauri-Pekka Aho
#10.2.2017
#Data wrangling of UCI Machine Learning Repository, Student Alcohol consumption data
setwd("~/IODS/IODS-project/data")
math <- read.csv("student-mat.csv", sep = ";")
str(math)
dim(math)
por <- read.csv("student-por.csv", sep = ";")
str(por)
dim(por)
install.packages("dplyr")
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix=c(".math", ".por"))
str(math_por)
dim(math_por)
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
two_columns <- select(math_por, starts_with(column_name))
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
alc[column_name] <- round(rowMeans(two_columns))
} else {
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = (alc_use > 2))
glimpse(alc)
write.table(alc, "alc.csv", sep=",")
install.packages("dplyr")
write.csv(alc, "alc.csv")
alc <- read.csv("alc.csv", sep = ",")
View(alc)
alc <- subset(alc, select = -c("X") )
alc <- subset(alc, select = c("X") )
alc <- read.csv("alc.csv", sep = ",")
alc$X == NULL
View(alc)
alc <- alc$X == NULL
alc <- read.csv("alc.csv", sep = ",")
alc <- alc[,2:36]
View(alc)
colnames(alc)
glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
glm(high_use ~ failures + absences + nursery + studytime, data = alc, family = "binomial")
install.packages("dlyr")
plot(m)
summarise(alc$absences)
sum(alc$absences)
mean(alc$absences)
variance(alc$absences)
var(alc$absences)
median(alc$absences)
install.packages("ggplot2")
library(ggplot2)
g1 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g1
g1 + geom_boxplot() + ylab("grade")
g1 + geom_boxplot() + ylab("absences")
g1 <- ggplot(alc, aes(x = high_use, y = absences, col = nursery))
g1
g1 + geom_boxplot() + ylab("absences")
